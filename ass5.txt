Assignment 5

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

df=pd.read_csv("Social_Network_Ads1.csv")
df.head()

df.shape

df.describe()

df.Purchased.value_counts()

#Converting Categorical to numerical values
df['Gender']=df['Gender'].map({'Male':0, 'Female':1})
df.head()

#Check for null values
df.isnull().sum()

#Covariance matrix to select most promising featues
cov_matrix=df.corr()
print("Covariance matrix:\n",cov_matrix)

#Divide dataset into Independent(X) and Dependent(y) variable
X=df[['Age','EstimatedSalary']]
y=df['Purchased']

#Split dataset into training and testing dataset
X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.1, random_state=42)

#success
print("Training and Testing dataset split was successful.")

# Train logistic regression model
model=LogisticRegression()
model.fit(X_train,y_train)

# Predict y_pred for train_X and test_x

y_train_pred=model.predict(X_train)
y_test_pred=model.predict(X_test)

#Evaluate performance of model
train_accuracy=accuracy_score(y_train,y_train_pred)
test_accuracy=accuracy_score(y_test,y_test_pred)

print("Train Accuracy:",train_accuracy*100)
print("Test Accuracy:",test_accuracy*100)

#calculate evaluation parameters
# Confusion matrix
confusion_mat=confusion_matrix(y_test,y_test_pred)
print("Confusion matrix:\n",confusion_mat)

# Classification report
classification_rep=classification_report(y_test,y_test_pred)
print("\n\nClassification Report:\n",classification_rep)

# Plot Logistic Regression graph
plt.scatter(X_train['Age'], X_train['EstimatedSalary'], c=y_train, cmap='rainbow')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.title('Logistic Regression')
plt.show()